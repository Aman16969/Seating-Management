package com.example.SeatingManagement.ServiceImple;

import com.example.SeatingManagement.Entity.DisscussionRoom;
import com.example.SeatingManagement.Entity.Location;
import com.example.SeatingManagement.EntityRequestBody.BoardRoomDto;
import com.example.SeatingManagement.EntityRequestBody.DisscussionRoomDto;
import com.example.SeatingManagement.EntityRequestBody.LocationDto;
import com.example.SeatingManagement.Repository.DisscussionRoomRepository;
import com.example.SeatingManagement.Services.DisscussionRoomServices;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class DisscussionRoomImple implements DisscussionRoomServices {
    @Autowired
    private ModelMapper modelMapper;
    @Autowired
    private DisscussionRoomRepository disscussionRoomRepository;
    @Override
    public DisscussionRoomDto addnewDisscussionRoom(DisscussionRoomDto disscussionRoomDto) {
        DisscussionRoom disscussionRoom=this.modelMapper.map(disscussionRoomDto,DisscussionRoom.class);
        DisscussionRoom createdRoom=this.disscussionRoomRepository.save(disscussionRoom);
        return this.modelMapper.map(createdRoom,DisscussionRoomDto.class);
    }

    @Override
    public void autoGenerateDisscussionRoom(LocationDto locationDto) {
        Integer disscussionRoomCapacity=locationDto.getBoardRoomCapacity();
        Location location=this.modelMapper.map(locationDto,Location.class);
        Integer locIdLey=locationDto.getId();
        String locNameKey=locationDto.getName().substring(0,1).toUpperCase();
        for(int i=1;i<=disscussionRoomCapacity;i++){
            StringBuilder geneateId=new StringBuilder();
            StringBuilder genrateName=new StringBuilder();
            geneateId.append(""+locIdLey).append(locNameKey).append(""+i);
            genrateName.append(locNameKey).append(""+i);
            String id = geneateId.toString();
            String name=genrateName.toString();
            DisscussionRoomDto disscussionRoomDto=new DisscussionRoomDto(id,name,true,location);
            DisscussionRoomDto createdRoom=this.addnewDisscussionRoom(disscussionRoomDto);
        }
    }

    @Override
    public void autoUpdateExistingDisscussionRoom(Integer currentDisscussionCapacity, Integer newDisscussionCapacity, LocationDto locationDto) {
        if(newDisscussionCapacity>currentDisscussionCapacity){
            Location location=this.modelMapper.map(locationDto,Location.class);
            Integer locIdLey=locationDto.getId();
            String locNameKey=locationDto.getName().substring(0,1).toUpperCase();
            for(Integer i=currentDisscussionCapacity+1;i<=newDisscussionCapacity;i++){
                StringBuilder geneateId=new StringBuilder();
                StringBuilder genrateName=new StringBuilder();
                geneateId.append(""+locIdLey).append(locNameKey).append(""+i);
                genrateName.append(locNameKey).append(""+i);
                String id = geneateId.toString();
                String name=genrateName.toString();
                DisscussionRoomDto boardDisscussionDto=new DisscussionRoomDto(id,name,true,location);
                DisscussionRoomDto createdDisscussionRoom=this.addnewDisscussionRoom(boardDisscussionDto);

            }
        }
    }
}
